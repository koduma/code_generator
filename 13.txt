//combination

#include <stdio.h>

int main(){
  int r = 0;
  int c = 0;
  int x = 0;
  int y = 0;
  int d = 0;
  int l = 0;
  
  int res = 0;
  
  long long ans = 0LL;
  long long mod_num = 1000000007LL;
  
  long long comb[901][901] = {};
  
  res = scanf("%d", &r);
  res = scanf("%d", &c);
  res = scanf("%d", &x);
  res = scanf("%d", &y);
  res = scanf("%d", &d);
  res = scanf("%d", &l);
  
  for (int i = 0; i <= x*y; i++) {
    comb[i][0] = 1LL;
    comb[i][i] = 1LL;
    for (int j = 1; j < i; j++) {
      comb[i][j] = (comb[i-1][j-1]+comb[i-1][j])%mod_num;
    }
  }
  
  ans = (comb[x*y][d]*comb[x*y-d][l])%mod_num;
  if (d+l <= x*(y-1)) {
    long long tmp = (comb[x*(y-1)][d]*comb[x*(y-1)-d][l])%mod_num;
    ans += 2LL*(mod_num-tmp);
  }
  if (d+l <= (x-1)*y) {
    long long tmp = (comb[(x-1)*y][d]*comb[(x-1)*y-d][l])%mod_num;
    ans += 2LL*(mod_num-tmp);
  }
  if (d+l <= (x-1)*(y-1)) {
    long long tmp = (comb[(x-1)*(y-1)][d]*comb[(x-1)*(y-1)-d][l])%mod_num;
    ans += 4LL*tmp;
  }
  if (y > 1 && d+l <= x*(y-2)) {
    long long tmp = (comb[x*(y-2)][d]*comb[x*(y-2)-d][l])%mod_num;
    ans += tmp;
  }
  if (x > 1 && d+l <= (x-2)*y) {
    long long tmp = (comb[(x-2)*y][d]*comb[(x-2)*y-d][l])%mod_num;
    ans += tmp;
  }
  if (y > 1 && d+l <= (x-1)*(y-2)) {
    long long tmp = (comb[(x-1)*(y-2)][d]*comb[(x-1)*(y-2)-d][l])%mod_num;
    ans += 2LL*(mod_num-tmp);
  }
  if (x > 1 && d+l <= (x-2)*(y-1)) {
    long long tmp = (comb[(x-2)*(y-1)][d]*comb[(x-2)*(y-1)-d][l])%mod_num;
    ans += 2LL*(mod_num-tmp);
  }
  if (x > 1 && y > 1 && d+l <= (x-2)*(y-2)) {
    long long tmp = (comb[(x-2)*(y-2)][d]*comb[(x-2)*(y-2)-d][l])%mod_num;
    ans += tmp;
  }
  
  ans *= (long long)(r-x+1);
  ans *= (long long)(c-y+1);
  printf("%lld\n", ans%mod_num);
  return 0;
}
