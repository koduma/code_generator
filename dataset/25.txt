//abc042_d

#include <stdio.h>
#include <stdlib.h>

#define MAX 199999
#define MOD 1000000007

long long fac[MAX];
long long finv[MAX];

// 前計算
void com_init() {
  long long inv[MAX];

  fac[0] = fac[1] = 1;
  finv[0] = finv[1] = 1;
  inv[1] = 1;

  for (int i = 2; i < MAX; i++) {
    // 階乗の計算
    fac[i] = fac[i - 1] * i % MOD;
    // 拡張ユークリッドの互除法による逆元計算
    inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;
    // 階乗の逆元
    finv[i] = finv[i - 1] * inv[i] % MOD;
  }
}

// 組み合わせ計算（前計算済み）
long long mod_comb(int n, int k) {
  if (n < k)
    return 0;
  else if (n < 0 || k < 0)
    return 0;
  return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
}

int main(){
  int H, W, A, B;
  scanf("%d %d %d %d", &H, &W, &A, &B);

  // 前計算
  com_init();

  // 最終的な答えを格納する変数
  long long ans = 0;

  // iは山道のy座標を表す。山道の各y座標について処理を行う。
  for (int i = 0; i < H - A; i++) {

    // スタート地点から平地の入り口（B, i+1）までの移動方法の数を計算
    long long first_comb = mod_comb(B - 1 + i, i);

    // 平地の入り口からゴール地点までの移動方法の数を計算
    long long second_comb = mod_comb(W - B - 1 + H - 1 - i, H - 1 - i);

    // 2つの移動方法の数を掛け合わせる（MODで割る）
    long long temp = (first_comb * second_comb) % MOD;

    // 今までの答えに加算（MODで割る）
    ans = (ans + temp) % MOD;
  }

  printf("%lld\n", ans);

  return 0;
}
